// ===========================================================
// Prisma schema corregido — Ticketing Platform
// ===========================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================================
// ENUMS
// ===========================================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  VIEWER
}

enum EventStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum ReservationStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
  EXPIRED
}

// ===========================================================
// MODELS
// ===========================================================

model Admin {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole   @default(ADMIN)
  isActive      Boolean    @default(true)
  lastLogin     DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  auditLogs     AuditLog[]
  venuesCreated Venue[]    @relation("VenueCreatedBy")
  events        Event[]

  @@index([email])
  @@map("admins")
}

model Venue {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  capacity    Int
  address     String
  city        String
  state       String?
  country     String         @default("España")
  postalCode  String
  latitude    Float?
  longitude   Float?
  description String?
  amenities   String[]
  images      String[]
  isActive    Boolean        @default(true)
  createdById String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  createdBy   Admin?         @relation("VenueCreatedBy", fields: [createdById], references: [id])
  sections    VenueSection[]
  events      Event[]

  @@index([slug])
  @@index([city])
}

model VenueSection {
  id            String          @id @default(uuid())
  venueId       String
  name          String
  capacity      Int
  description   String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  venue         Venue           @relation(fields: [venueId], references: [id], onDelete: Cascade)
  priceCategories PriceCategory[]

  @@unique([venueId, name])
  @@index([venueId])
}

model Event {
  id               String        @id @default(uuid())
  name             String
  description      String?
  slug             String        @unique
  status           EventStatus   @default(DRAFT)
  eventDate        DateTime
  doorsOpenTime    DateTime?
  saleStartDate    DateTime
  saleEndDate      DateTime
  venueId          String
  totalCapacity    Int
  availableTickets Int
  reservedTickets  Int           @default(0)
  soldTickets      Int           @default(0)
  tags             String[]
  bannerImage      String?
  thumbnailImage   String?
  images           String[]
  minPrice         Decimal       @db.Decimal(10, 2)
  maxPrice         Decimal       @db.Decimal(10, 2)
  ageRestriction   String?
  createdById      String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  publishedAt      DateTime?
  cancelledAt      DateTime?
  completedAt      DateTime?
  metadata         Json?

  category_id      Int
  subcategory_id   Int?

  venue            Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  category         EventCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  subcategory      EventSubcategory? @relation(fields: [subcategory_id], references: [id], onDelete: Cascade)
  createdBy        Admin         @relation(fields: [createdById], references: [id])

  orders           Order[]
  reservations     Reservation[]
  tickets          Ticket[]
  localities       EventLocality[]
  priceCategories  PriceCategory[]
  auditLogs        AuditLog[]

  @@index([slug])
  @@index([status])
  @@index([eventDate])
  @@map("Event")
}

model EventCategory {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  slug             String             @unique
  description      String?
  color            String?
  icon             String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  EventSubcategory EventSubcategory[]
  events           Event[]
}

model EventSubcategory {
  id            Int           @id @default(autoincrement())
  category_id   Int
  name          String
  slug          String        @unique
  description   String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  EventCategory EventCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  events        Event[]

  @@unique([category_id, name])
  @@index([slug])
}

model EventLocality {
  id           String         @id @default(uuid())
  eventId      String
  name         String
  description  String?
  price        Decimal        @db.Decimal(10, 2)
  capacity     Int
  available    Int
  sold         Int            @default(0)
  sectionId    String?
  isVip        Boolean        @default(false)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  orders       Order[]
  reservations Reservation[]
  tickets      Ticket[]

  @@unique([eventId, name])
  @@index([eventId])
  @@index([isActive])
  @@map("EventLocality")
}

model PriceCategory {
  id          String        @id @default(uuid())
  eventId     String
  sectionId   String?
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  capacity    Int
  available   Int
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  section     VenueSection? @relation(fields: [sectionId], references: [id])

  @@unique([eventId, name])
  @@index([eventId])
  @@map("PriceCategory")
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  eventId         String
  localityId      String
  quantity        Int
  totalAmount     Decimal       @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  finalAmount     Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  stripeSessionId String?       @unique
  stripePaymentId String?
  reservationId   String?
  userEmail       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paidAt          DateTime?

  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locality        EventLocality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  reservation     Reservation?  @relation(fields: [reservationId], references: [id])
  tickets         Ticket[]

  @@index([userId])
  @@index([status])
  @@index([stripeSessionId])
  @@index([eventId])
  @@map("Order")
}

model Reservation {
  id         String            @id @default(uuid())
  userId     String
  eventId    String
  localityId String
  quantity   Int
  status     ReservationStatus @default(ACTIVE)
  expiresAt  DateTime
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  orders     Order[]
  event      Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locality   EventLocality     @relation(fields: [localityId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@index([eventId])
  @@map("Reservation")
}

model Ticket {
  id         String        @id @default(uuid())
  orderId    String
  eventId    String
  localityId String
  userId     String
  ticketCode String        @unique
  qrCode     String?
  status     TicketStatus  @default(VALID)
  usedAt     DateTime?
  createdAt  DateTime      @default(now())

  event      Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locality   EventLocality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  order      Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ticketCode])
  @@index([status])
  @@index([orderId])
  @@map("Ticket")
}

model AuditLog {
  id        String   @id @default(uuid())
  adminId   String
  action    String
  tableName String
  recordId  String?
  eventId   String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([tableName, recordId])
  @@index([adminId])
  @@index([createdAt])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                     String         @id @default(uuid())
  name                   String
  type                   String
  region                 String
  contact_email          String
  contact_phone          String?
  address                String?
  description            String?
  requires_approval      Boolean?       @default(true)
  auto_approve_threshold Decimal?       @db.Decimal(10, 2)
  is_active              Boolean?       @default(true)
  created_at             DateTime?      @default(now()) @db.Timestamp(6)
  updated_at             DateTime?      @default(now()) @db.Timestamp(6)
  deleted_at             DateTime?      @db.Timestamp(6)
  company_admins         CompanyAdmin[]

  @@map("companies")
}

model CompanyAdmin {
  id               String    @id @default(uuid())
  company_id       String
  email            String    @unique
  password         String
  first_name       String
  last_name        String
  can_create       Boolean?  @default(true)
  can_update       Boolean?  @default(true)
  can_delete       Boolean?  @default(false)
  can_view_stats   Boolean?  @default(true)
  can_manage_stock Boolean?  @default(false)
  is_active        Boolean?  @default(true)
  last_login       DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  deleted_at       DateTime? @db.Timestamp(6)
  companies        Company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("company_admins")
}

model AuditLog {
  id        String   @id
  tableName String
  recordId  String
  action    String
  fieldName String?
  oldValue  Json?
  newValue  Json?
  adminId   String
  eventId   String?
  ipAddress String?
  userAgent String?
  sessionId String?
  createdAt DateTime @default(now())
  admins    admins   @relation(fields: [adminId], references: [id])
  Event     Event?   @relation(fields: [eventId], references: [id])

  @@index([adminId])
  @@index([createdAt])
  @@index([tableName, recordId])
}

model Event {
  id               String            @id
  name             String
  description      String?
  slug             String            @unique
  status           EventStatus       @default(DRAFT)
  eventDate        DateTime
  doorsOpenTime    DateTime?
  saleStartDate    DateTime
  saleEndDate      DateTime
  venueId          String
  totalCapacity    Int
  availableTickets Int
  reservedTickets  Int               @default(0)
  soldTickets      Int               @default(0)
  tags             String[]
  bannerImage      String?
  thumbnailImage   String?
  images           String[]
  minPrice         Decimal           @db.Decimal(10, 2)
  maxPrice         Decimal           @db.Decimal(10, 2)
  ageRestriction   String?
  createdById      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  publishedAt      DateTime?
  cancelledAt      DateTime?
  completedAt      DateTime?
  metadata         Json?
  category_id      Int
  subcategory_id   Int?
  AuditLog         AuditLog[]
  admins           admins            @relation(fields: [createdById], references: [id])
  Venue            Venue             @relation(fields: [venueId], references: [id])
  EventCategory    EventCategory     @relation(fields: [category_id], references: [id], map: "fk_event_category")
  EventSubcategory EventSubcategory? @relation(fields: [subcategory_id], references: [id], map: "fk_event_subcategory")
  EventLocality    EventLocality[]
  Order            Order[]
  PriceCategory    PriceCategory[]
  Reservation      Reservation[]
  Ticket           Ticket[]

  @@index([eventDate])
  @@index([slug])
  @@index([status])
}

model EventCategory {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  slug             String?            @unique
  description      String?
  icon             String?
  image            String?
  images           String[]           @default([])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  Event            Event[]
  EventSubcategory EventSubcategory[]

  @@index([slug])
}

model EventLocality {
  id               String        @id
  eventId          String
  name             String
  description      String?
  capacity         Int
  price            Decimal       @db.Decimal(10, 2)
  availableTickets Int
  soldTickets      Int           @default(0)
  reservedTickets  Int           @default(0)
  color            String?
  isActive         Boolean       @default(true)
  sortOrder        Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  Event            Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Order            Order[]
  Reservation      Reservation[]
  Ticket           Ticket[]

  @@unique([eventId, name])
  @@index([eventId])
  @@index([isActive])
}

model EventSubcategory {
  id            Int           @id @default(autoincrement())
  category_id   Int
  name          String
  slug          String?       @unique
  description   String?
  icon          String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Event         Event[]
  EventCategory EventCategory @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([category_id, name])
  @@index([slug])
}

model Order {
  id              String        @id
  userId          String
  eventId         String
  localityId      String
  quantity        Int
  totalAmount     Decimal       @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  finalAmount     Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  stripeSessionId String?       @unique
  stripePaymentId String?
  reservationId   String?
  userEmail       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  paidAt          DateTime?
  Event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  EventLocality   EventLocality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  Reservation     Reservation?  @relation(fields: [reservationId], references: [id])
  Ticket          Ticket[]

  @@index([eventId])
  @@index([status])
  @@index([stripeSessionId])
  @@index([userId])
}

model PriceCategory {
  id               String        @id
  eventId          String
  name             String
  description      String?
  price            Decimal       @db.Decimal(10, 2)
  totalTickets     Int
  availableTickets Int
  isActive         Boolean       @default(true)
  capacity         Int
  createdAt        DateTime      @default(now())
  metadata         Json?
  sectionId        String?
  updatedAt        DateTime
  Event            Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  VenueSection     VenueSection? @relation(fields: [sectionId], references: [id])

  @@unique([eventId, name])
  @@index([eventId])
}

model Reservation {
  id            String            @id
  userId        String
  eventId       String
  localityId    String
  quantity      Int
  status        ReservationStatus @default(ACTIVE)
  expiresAt     DateTime
  createdAt     DateTime          @default(now())
  updatedAt     DateTime
  Order         Order[]
  Event         Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  EventLocality EventLocality     @relation(fields: [localityId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([expiresAt])
  @@index([status])
  @@index([userId])
}

model Ticket {
  id            String        @id
  orderId       String
  eventId       String
  localityId    String
  userId        String
  ticketCode    String        @unique
  qrCode        String?
  status        TicketStatus  @default(VALID)
  usedAt        DateTime?
  createdAt     DateTime      @default(now())
  Event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  EventLocality EventLocality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  Order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([ticketCode])
  @@index([userId])
}

model Venue {
  id           String         @id
  name         String
  slug         String         @unique
  capacity     Int
  address      String
  city         String
  state        String?
  country      String         @default("EspaÔö£├ÂÔö£├éÔö¼├║Ôö£├ÂÔö£ÔòùÔö£├Ña")
  postalCode   String
  latitude     Float?
  longitude    Float?
  description  String?
  amenities    String[]
  images       String[]
  isActive     Boolean        @default(true)
  createdById  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Event        Event[]
  admins       admins?        @relation(fields: [createdById], references: [id])
  VenueSection VenueSection[]

  @@index([city])
  @@index([slug])
}

model VenueSection {
  id            String          @id
  venueId       String
  name          String
  capacity      Int
  rowCount      Int?
  seatsPerRow   Int?
  PriceCategory PriceCategory[]
  Venue         Venue           @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([venueId, name])
  @@index([venueId])
}

model admins {
  id        String     @id
  email     String     @unique
  password  String
  firstName String
  lastName  String
  role      UserRole   @default(ADMIN)
  isActive  Boolean    @default(true)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  AuditLog  AuditLog[]
  Event     Event[]
  Venue     Venue[]

  @@index([email])
}

enum EventStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum ReservationStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
  EXPIRED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  VIEWER
}

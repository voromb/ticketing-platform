generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole   @default(ADMIN)
  isActive      Boolean    @default(true)
  lastLogin     DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  auditLogs     AuditLog[]
  eventsCreated Event[]
  venuesCreated Venue[]

  @@index([email])
  @@map("admins")
}

model Venue {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  capacity    Int
  address     String
  city        String
  state       String?
  country     String         @default("Espa├ö├Â┬ú├ö├╗├åa")
  postalCode  String
  latitude    Float?
  longitude   Float?
  description String?
  amenities   String[]
  images      String[]
  isActive    Boolean        @default(true)
  createdById String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  events      Event[]
  createdBy   Admin?         @relation(fields: [createdById], references: [id])
  sections    VenueSection[]

  @@index([slug])
  @@index([city])
}

model VenueSection {
  id            String          @id @default(uuid())
  venueId       String
  name          String
  capacity      Int
  rowCount      Int?
  seatsPerRow   Int?
  PriceCategory PriceCategory[]
  venue         Venue           @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([venueId, name])
  @@index([venueId])
}

model Event {
  id               String            @id @default(uuid())
  name             String
  description      String?
  slug             String            @unique
  status           EventStatus       @default(DRAFT)
  eventDate        DateTime
  doorsOpenTime    DateTime?
  saleStartDate    DateTime
  saleEndDate      DateTime
  venueId          String
  totalCapacity    Int
  availableTickets Int
  reservedTickets  Int               @default(0)
  soldTickets      Int               @default(0)
  tags             String[]
  bannerImage      String?
  thumbnailImage   String?
  images           String[]
  minPrice         Decimal           @db.Decimal(10, 2)
  maxPrice         Decimal           @db.Decimal(10, 2)
  ageRestriction   String?
  createdById      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  publishedAt      DateTime?
  cancelledAt      DateTime?
  completedAt      DateTime?
  metadata         Json?
  categoryId       Int               @map("category_id")
  subcategoryId    Int?              @map("subcategory_id")
  auditLogs        AuditLog[]
  createdBy        Admin             @relation(fields: [createdById], references: [id])
  venue            Venue             @relation(fields: [venueId], references: [id])
  category         EventCategory     @relation(fields: [categoryId], references: [id], map: "fk_event_category")
  subcategory      EventSubcategory? @relation(fields: [subcategoryId], references: [id], map: "fk_event_subcategory")
  localities       EventLocality[]
  orders           Order[]
  priceCategories  PriceCategory[]
  reservations     Reservation[]
  tickets          Ticket[]

  @@index([slug])
  @@index([status])
  @@index([eventDate])
  @@map("Event")
}

model PriceCategory {
  id               String        @id @default(uuid())
  eventId          String
  name             String
  description      String?
  price            Decimal       @db.Decimal(10, 2)
  totalTickets     Int
  availableTickets Int
  isActive         Boolean       @default(true)
  capacity         Int
  createdAt        DateTime      @default(now())
  metadata         Json?
  sectionId        String?
  updatedAt        DateTime
  event            Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  VenueSection     VenueSection? @relation(fields: [sectionId], references: [id])

  @@unique([eventId, name])
  @@index([eventId])
}

model AuditLog {
  id        String   @id @default(uuid())
  tableName String
  recordId  String
  action    String
  fieldName String?
  oldValue  Json?
  newValue  Json?
  adminId   String
  eventId   String?
  ipAddress String?
  userAgent String?
  sessionId String?
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])

  @@index([tableName, recordId])
  @@index([adminId])
  @@index([createdAt])
}

model EventCategory {
  id            Int                @id @default(autoincrement())
  name          String             @unique
  slug          String?            @unique
  description   String?
  icon          String?
  image         String?
  images        String[]           @default([])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
  events        Event[]
  subcategories EventSubcategory[]

  @@index([slug])
}

model EventSubcategory {
  id          Int           @id @default(autoincrement())
  categoryId  Int           @map("category_id")
  name        String
  slug        String?       @unique
  description String?
  icon        String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  events      Event[]
  category    EventCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([categoryId, name])
  @@index([slug])
}

model EventLocality {
  id               String        @id @default(uuid())
  eventId          String
  name             String
  description      String?
  capacity         Int
  price            Decimal       @db.Decimal(10, 2)
  availableTickets Int
  soldTickets      Int           @default(0)
  reservedTickets  Int           @default(0)
  color            String?
  isActive         Boolean       @default(true)
  sortOrder        Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  event            Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  orders           Order[]
  reservations     Reservation[]
  tickets          Ticket[]

  @@unique([eventId, name])
  @@index([eventId])
  @@index([isActive])
  @@map("EventLocality")
}

model Reservation {
  id         String            @id @default(uuid())
  userId     String
  eventId    String
  localityId String
  quantity   Int
  status     ReservationStatus @default(ACTIVE)
  expiresAt  DateTime
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  orders     Order[]
  event      Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locality   EventLocality     @relation(fields: [localityId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@index([eventId])
  @@map("Reservation")
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  eventId         String
  localityId      String
  quantity        Int
  totalAmount     Decimal       @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  finalAmount     Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  stripeSessionId String?       @unique
  stripePaymentId String?
  reservationId   String?
  userEmail       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paidAt          DateTime?
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locality        EventLocality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  reservation     Reservation?  @relation(fields: [reservationId], references: [id])
  tickets         Ticket[]

  @@index([userId])
  @@index([status])
  @@index([stripeSessionId])
  @@index([eventId])
  @@map("Order")
}

model Ticket {
  id         String        @id @default(uuid())
  orderId    String
  eventId    String
  localityId String
  userId     String
  ticketCode String        @unique
  qrCode     String?
  status     TicketStatus  @default(VALID)
  usedAt     DateTime?
  createdAt  DateTime      @default(now())
  event      Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locality   EventLocality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  order      Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ticketCode])
  @@index([status])
  @@index([orderId])
  @@map("Ticket")
}

model Company {
  id                     String         @id @default(uuid())
  name                   String
  type                   String
  region                 String
  contact_email          String
  contact_phone          String?
  address                String?
  description            String?
  requires_approval      Boolean?       @default(true)
  auto_approve_threshold Decimal?       @db.Decimal(10, 2)
  is_active              Boolean?       @default(true)
  created_at             DateTime?      @default(now()) @db.Timestamp(6)
  updated_at             DateTime?      @default(now()) @db.Timestamp(6)
  deleted_at             DateTime?      @db.Timestamp(6)
  company_admins         CompanyAdmin[]
  approvals              Approval[]

  @@map("companies")
}

model CompanyAdmin {
  id               String    @id @default(uuid())
  company_id       String
  email            String    @unique
  password         String
  first_name       String
  last_name        String
  can_create       Boolean?  @default(true)
  can_update       Boolean?  @default(true)
  can_delete       Boolean?  @default(false)
  can_view_stats   Boolean?  @default(true)
  can_manage_stock Boolean?  @default(false)
  is_active        Boolean?  @default(true)
  last_login       DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  deleted_at       DateTime? @db.Timestamp(6)
  companies        Company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("company_admins")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  VIEWER
}

enum EventStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum ReservationStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
  EXPIRED
}

model Approval {
  id            String         @id @default(uuid())
  resourceType  ResourceType
  resourceId    String
  resourceName  String
  companyId     String
  companyName   String
  requestedBy   String
  requestedAt   DateTime       @default(now())
  status        ApprovalStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  notes         String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  company       Company        @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([status])
  @@index([resourceType])
  @@map("approvals")
}

enum ResourceType {
  RESTAURANT
  TRIP
  PRODUCT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
